"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ueb_1 = require("./tables/ueb");
class Translator {
    constructor(language = 'ueb') {
        this.language = 'ueb';
    }
    get lang() {
        return this.language;
    }
    toBraille(text) {
        // return new Promise<string>((resolve, reject) => {
        //     resolve(uebBraille(text));
        // });
        switch (this.language) {
            case 'ueb':
                return uebBraille(text);
            default:
                return uebBraille(text);
        }
    }
    toNormal(text) {
        // return new Promise<string>((resolve, reject) => {
        //     resolve()
        // });
        switch (this.language) {
            case 'ueb':
                return uebTraditional(text);
            default:
                return uebTraditional(text);
        }
    }
}
function uebBraille(text) {
    return __awaiter(this, void 0, void 0, function* () {
        // const getkey = <T extends object, U extends keyof T>(key: U) => (obj: T) => obj[key];
        // let returnText: string = '';
        const returnText = text
            .split('')
            .map((char) => {
            if (ueb_1.default.braille.hasOwnProperty(char)) {
                const key = char;
                const value = ueb_1.default.braille[key];
                // That is a mess ^
                return value;
            }
            else {
                // console.log(text[i])
                return char;
            }
            // uebTable.braille[c]
        })
            .join('');
        // for (const char of text) {
        //     if (uebTable.braille.hasOwnProperty(char)) {
        //         const key: Key = char as Key;
        //         const value: string = uebTable.braille[key];
        //         // That is a mess ^
        //         returnText += value;
        //     } else {
        //         // console.log(text[i])
        //         returnText += char;
        //     }
        // }
        // return returnText;
        return returnText;
    });
}
function uebTraditional(text) {
    return __awaiter(this, void 0, void 0, function* () {
        let returnText = '';
        for (let i = 0; i < text.length; i++) {
            if (text[i] === '⠠' /*Capital*/ || text[i] === '⠼' /*Number*/ || text[i] === '⠫' /*Shape*/) {
                // If capital, number or shape, indicator
                continue;
            }
            else {
                if (text[i - 1] === '⠠' /*Capital Indicator*/) {
                    const char = text[i - 1] + text[i];
                    const key = char;
                    const value = ueb_1.default.normal[key];
                    returnText += value; // Searches table for indicator and the following char
                    continue; // Breaks to avoid repeat of char
                }
                if (text[i - 1] === '⠼' /*Number Indicator*/) {
                    const char = text[i - 1] + text[i];
                    const key = char;
                    returnText += ueb_1.default.normal[key]; // Searches table for indicator and the following char
                    continue; // Breaks to avoid repeat of char
                }
                if (ueb_1.default.normal.hasOwnProperty(text[i]) /*Checks if char is in table*/) {
                    const char = text[i];
                    const key = char;
                    returnText += ueb_1.default.normal[key];
                } /*If not in table*/
                else {
                    returnText += text[i];
                }
            }
        }
        return returnText;
    });
}
exports.default = Translator;
